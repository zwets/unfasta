#!/bin/sh
#
#  uf-select - Select sequences from an unfasta file
#  Copyright (C) 2016  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  This utility is part of http://io.zwets.it/unfasta

# Function to exit this script with an error message on stderr
err_exit() {
    echo "$(basename "$0"): $*" >&2
    exit 1
}

# Function to show usage information and exit
usage_exit() {
    echo "
Usage: $(basename $0) [OPTIONS|NUMBERS|REGEX] [FILE ...]

  Select sequences from unfasta FILEs and write to standard output.
  If no FILE is present or when FILE is '-', read standard input.

  OPTIONS
   -n, --nth N[,..]  Select the nth sequence(s) for each file.
   -i, --id SEQID    Select the sequence(s) whose ID equals SEQID
   -g, --grep REGEX  Select the sequence(s) whose header matches REGEX.

  As a convenience, when no option is specified then if the first argument 
  parses as a valid list of NUMBERS then --nth is assumed, else --id is
  assumed.
" >&2
    exit ${1:-1}
}

# Parse options

unset NTH SEQID REGEX

while [ $# -ne 0 -a "$(expr "$1" : '\(.\)..*')" = "-" ]; do
    case $1 in
    --nth=*)   NTH=${1#--nth=} ;;
    -n|--nth)  shift; NTH=$1 ;;
    --id=*)    SEQID=${1#--id=} ;;
    -i|--id)   shift; SEQID=$1 ;;
    --grep=*)  REGEX=${1#--grep=} ;;
    -g|--grep) shift; REGEX=$1 ;;
    -h|--help) usage_exit 0 ;;
    -)         break ;;
    *)         usage_exit ;;
    esac
    shift || usage_exit
done

# Handle option-less case

if [ -z "${NTH}${SEQID}${REGEX}" ]; then
    [ -n "$1" ] || usage_exit
    if expr "$1" : '\([0-9]\+\(,[0-9]\+\)*$\)' >/dev/null; then
        NTH="$1"
    else
        SEQID="$1"
    fi
    shift
fi

# Check options

[ -z "$NTH" ] || [ -z "${SEQID}${REGEX}" ] || err_exit "options --nth, --id, and --grep cannot be combined"
[ -z "$SEQID" ] || [ -z "${NTH}${REGEX}" ] || err_exit "options --nth, --id, and --grep cannot be combined"
[ -z "$NTH" ] || expr "$NTH" : '\([0-9]\+\(,[0-9]\+\)*$\)' >/dev/null || err_exit "not a valid number list: $NTH"

# Do the work

FILE="${1:--}"

while [ -n "$FILE" ]; do
    if [ -n "$NTH" ]; then
        gawk -bO -v NTH=$NTH '
        BEGIN { split(NTH,lines,/,/) } 
        { for (x in lines) if (int((NR+1)/2) == lines[x]) print }
        ' "$FILE"
    elif [ -n "$SEQID" ]; then
        gawk -bO -v SEQID="$SEQID" '
            NR % 2 == 1 && $1 == ">" SEQID { print; getline; print }
        ' "$FILE"
    elif [ -n "$REGEX" ]; then
        gawk -bO "$(printf 'NR %% 2 == 1 && /%s/ { print; getline; print }\n' "$REGEX")" "$FILE"
    else
        usage_exit
    fi
    [ $# -gt 0 ] && shift && FILE="$1" || unset FILE
done

# vim: sts=4:sw=4:et:si:ai
