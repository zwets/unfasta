#!/bin/sh
#
#  uf-map - Apply an operation to all sequences in an unfasta stream.
#  Copyright (C) 2016  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Created on 2016-01-18

# Function to exit this script with an error message on stderr
err_exit() {
	echo "$(basename "$0"): $*" >&2
	exit 1
}

# Function to show usage information and exit
usage_exit() {
	echo
	echo "Usage: $(basename $0) [OPTIONS] OPERATION [FILE] ..."
	echo
	echo "  Feed every sequence in FILE to OPERATION's standard input.  When no FILE"
	echo "  is  present or FILE is '-', read from standard input.  Output is the output"
	echo "  of OPERATION interspersed with every header from the input."
	echo
	echo "  Note that OPERATION is started once, not invoked separately for each line."
	echo "  It must process every line coming in on its standard input separately."
	echo
	echo "  Example"
	echo "  \$ uf-map 'tr [:upper:] [:lower:]'  # convert all seqs to lower case"
	echo "  \$ uf-map 'sed -re s,^.{12},,'      # drop initial 12 elements from each"
	echo 
	exit ${1:-1}
}

# Parse options

while [ $# -ne 0 -a "$(expr "$1" : '\(.\).*')" = "-" ]; do
	case $1 in
	-h|--help)
		usage_exit 0
		;;
	*) usage_exit
		;;
	esac
	shift
done

# Parse arguments

[ $# -ge 1 ] || usage_exit
OPERATION="$1"
shift

# Do it 

# FAIL 1: using pipe within awk
# Fails because of race: external operation is buffering its output, so lines do not come out in the right order.
#awk -b -O -v OPER="sh -c '$OPERATION'" '
#	NR%2==1 { print }
#	NR%2==0 { print | OPER }
#	{ fflush() }' "$@"

# FAIL 2: using a FIFO between uf-bare and uf-dress
# Fails because of deadlock: uf-bare blocks on FIFO until uf-dress consumes,
# but uf-dress is waiting for standard input before consuming from FIFO.
#FIFO="/tmp/$(basename "$0").$$"
#mkfifo "$FIFO" 
#./uf-bare -f -w "$FIFO" | ./uf-dress -r "$FIFO"
#RETVAL=$?
#rm -f $FIFO

# Maybe using paste to pull things together?

# Set pipefail to have the errorcode of the rightmost failing filter (OPERATION)
[ -z "$BASH" ] set +o pipefail

# Make a FIFO to hold the headers and from which paste merges them with OPERATION standard output
FIFO="/tmp/$(basename "$0").$$"
mkfifo "$FIFO" 

# Run the pipeline
awk -b -O -v FIFO="$FIFO" 'NR%2==1 { print > FIFO }; NR%2==0' "$@" | $OPERATION | paste -d '\n' "$FIFO" -
RETVAL=$?

# Clean up - @TODO@ set a shell trap, is cleaner
rm -f $FIFO

exit $RETVAL

