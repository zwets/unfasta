#!/bin/sh
#
#  uf - Convert FASTA to unfasta format
#  Copyright (C) 2016  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  This utility is part of http://io.zwets.it/unfasta

# Function to exit this script with an error message on stderr
err_exit() {
    echo "$(basename "$0"): $*" >&2
    exit 1
}

# Function to show usage information and exit
usage_exit() {
    echo "
Usage: $(basename $0) [OPTIONS] [FILE ...]
  
  Convert FILEs to unfasta format and write to standard output.  With no
  FILE or when FILE is '-', read standard input.  Unfasta is FASTA without
  the pesky line breaks.
 
  Options
   -r, --revert  Revert unfasta to FASTA (see below)
   -l, --lower   Write lowercase
   -u, --upper   Write uppercase

  Option -r reverts sequences to classic FASTA by breaking lines at 80 chars.
  Note however that there is no need to do this, as every unfasta file is also
  a valid FASTA file.  The 60 or 80 char limit is only a recommendation.

  Note that all this program does is removing all white space from the sequence
  lines in the input.  It leaves everything else intact.  Notably it performs no
  validation on the header or data lines.  See uf-valid.

  More information about the unfasta suite at http://io.zwets.it/unfasta.
" >&2
    exit ${1:-1}
}

# Parse options

unset REVERT
LOWER=0
UPPER=0

while [ $# -ne 0 -a "$(expr "$1" : '\(.\)..*')" = "-" ]; do
    case $1 in
    -l|--lower)
        LOWER=1
        ;;
    -u|--upper)
        UPPER=1
        ;;
    -r|--rever*)
        REVERT="true"
        ;;
    -h|--help)
        usage_exit 0
        ;;
    *) usage_exit
        ;;
    esac
    shift
done

if [ -n "$REVERT" ]; then
    gawk -bO -v WIDTH=80 -v L=$LOWER -v U=$UPPER '
    /^>/ 
    /^[^>]/ { for (i=1;i<=length();i+=WIDTH) { S=substr($0,i,WIDTH); print (L ? tolower(S) : U ? toupper(S) : S) } }' "$@"
else
    gawk -bO -v L=$LOWER -v U=$UPPER 'BEGIN { ORS="" }
    /^>/    { if (NR!=1) print "\n"; print $0 "\n" }
    /^[^>]/ { gsub(/[[:space:]]/,""); print (L ? tolower($0) : U ? toupper($0) : $0) }
    END { print "\n" }' "$@"
fi

# vim: sts=4:sw=4:et:si:ai
